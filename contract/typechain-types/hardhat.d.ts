/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC1155Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Errors__factory>;
    getContractFactory(
      name: "IERC20Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Errors__factory>;
    getContractFactory(
      name: "IERC721Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Errors__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "ReentrancyGuard",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyGuard__factory>;
    getContractFactory(
      name: "ComplianceService",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ComplianceService__factory>;
    getContractFactory(
      name: "DSToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DSToken__factory>;
    getContractFactory(
      name: "IComplianceService",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IComplianceService__factory>;
    getContractFactory(
      name: "IRegistryService",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRegistryService__factory>;
    getContractFactory(
      name: "ITrustService",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITrustService__factory>;
    getContractFactory(
      name: "RegistryService",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RegistryService__factory>;
    getContractFactory(
      name: "StableCoin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StableCoin__factory>;
    getContractFactory(
      name: "StableCoinFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StableCoinFactory__factory>;
    getContractFactory(
      name: "TrustService",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TrustService__factory>;

    getContractAt(
      name: "Ownable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC1155Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Errors>;
    getContractAt(
      name: "IERC20Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Errors>;
    getContractAt(
      name: "IERC721Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Errors>;
    getContractAt(
      name: "ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "Pausable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "ReentrancyGuard",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyGuard>;
    getContractAt(
      name: "ComplianceService",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ComplianceService>;
    getContractAt(
      name: "DSToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DSToken>;
    getContractAt(
      name: "IComplianceService",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IComplianceService>;
    getContractAt(
      name: "IRegistryService",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IRegistryService>;
    getContractAt(
      name: "ITrustService",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ITrustService>;
    getContractAt(
      name: "RegistryService",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.RegistryService>;
    getContractAt(
      name: "StableCoin",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.StableCoin>;
    getContractAt(
      name: "StableCoinFactory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.StableCoinFactory>;
    getContractAt(
      name: "TrustService",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TrustService>;

    deployContract(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IERC1155Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Errors>;
    deployContract(
      name: "IERC20Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Errors>;
    deployContract(
      name: "IERC721Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Errors>;
    deployContract(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Pausable>;
    deployContract(
      name: "ReentrancyGuard",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReentrancyGuard>;
    deployContract(
      name: "ComplianceService",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ComplianceService>;
    deployContract(
      name: "DSToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DSToken>;
    deployContract(
      name: "IComplianceService",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IComplianceService>;
    deployContract(
      name: "IRegistryService",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRegistryService>;
    deployContract(
      name: "ITrustService",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITrustService>;
    deployContract(
      name: "RegistryService",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RegistryService>;
    deployContract(
      name: "StableCoin",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StableCoin>;
    deployContract(
      name: "StableCoinFactory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StableCoinFactory>;
    deployContract(
      name: "TrustService",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TrustService>;

    deployContract(
      name: "Ownable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IERC1155Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Errors>;
    deployContract(
      name: "IERC20Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Errors>;
    deployContract(
      name: "IERC721Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Errors>;
    deployContract(
      name: "ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "Pausable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Pausable>;
    deployContract(
      name: "ReentrancyGuard",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReentrancyGuard>;
    deployContract(
      name: "ComplianceService",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ComplianceService>;
    deployContract(
      name: "DSToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DSToken>;
    deployContract(
      name: "IComplianceService",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IComplianceService>;
    deployContract(
      name: "IRegistryService",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRegistryService>;
    deployContract(
      name: "ITrustService",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITrustService>;
    deployContract(
      name: "RegistryService",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RegistryService>;
    deployContract(
      name: "StableCoin",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StableCoin>;
    deployContract(
      name: "StableCoinFactory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StableCoinFactory>;
    deployContract(
      name: "TrustService",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TrustService>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
