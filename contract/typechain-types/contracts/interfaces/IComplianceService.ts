/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IComplianceServiceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "preIssuanceCheck"
      | "preTransferCheck"
      | "setComplianceMode"
      | "setCountryCompliance"
      | "setMaxHolders"
      | "validateBurn"
      | "validateIssuance"
      | "validateSeize"
      | "validateTransfer"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ComplianceViolation" | "PolicyChanged"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "preIssuanceCheck",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "preTransferCheck",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setComplianceMode",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCountryCompliance",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxHolders",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validateBurn",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validateIssuance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validateSeize",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validateTransfer",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "preIssuanceCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "preTransferCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setComplianceMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCountryCompliance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxHolders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateBurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateIssuance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateSeize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateTransfer",
    data: BytesLike
  ): Result;
}

export namespace ComplianceViolationEvent {
  export type InputTuple = [
    reason: string,
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [
    reason: string,
    from: string,
    to: string,
    value: bigint
  ];
  export interface OutputObject {
    reason: string;
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PolicyChangedEvent {
  export type InputTuple = [policy: string, data: BytesLike];
  export type OutputTuple = [policy: string, data: string];
  export interface OutputObject {
    policy: string;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IComplianceService extends BaseContract {
  connect(runner?: ContractRunner | null): IComplianceService;
  waitForDeployment(): Promise<this>;

  interface: IComplianceServiceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  preIssuanceCheck: TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [[boolean, string] & { ok: boolean; reason: string }],
    "view"
  >;

  preTransferCheck: TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [[boolean, string] & { ok: boolean; reason: string }],
    "view"
  >;

  setComplianceMode: TypedContractMethod<
    [mode: BigNumberish],
    [void],
    "nonpayable"
  >;

  setCountryCompliance: TypedContractMethod<
    [country: string, allowed: boolean],
    [void],
    "nonpayable"
  >;

  setMaxHolders: TypedContractMethod<
    [maxHolders: BigNumberish],
    [void],
    "nonpayable"
  >;

  validateBurn: TypedContractMethod<
    [who: AddressLike, value: BigNumberish],
    [[boolean, string] & { ok: boolean; reason: string }],
    "nonpayable"
  >;

  validateIssuance: TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [[boolean, string] & { ok: boolean; reason: string }],
    "nonpayable"
  >;

  validateSeize: TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [[boolean, string] & { ok: boolean; reason: string }],
    "nonpayable"
  >;

  validateTransfer: TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [[boolean, string] & { ok: boolean; reason: string }],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "preIssuanceCheck"
  ): TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [[boolean, string] & { ok: boolean; reason: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "preTransferCheck"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [[boolean, string] & { ok: boolean; reason: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "setComplianceMode"
  ): TypedContractMethod<[mode: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCountryCompliance"
  ): TypedContractMethod<
    [country: string, allowed: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMaxHolders"
  ): TypedContractMethod<[maxHolders: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "validateBurn"
  ): TypedContractMethod<
    [who: AddressLike, value: BigNumberish],
    [[boolean, string] & { ok: boolean; reason: string }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "validateIssuance"
  ): TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [[boolean, string] & { ok: boolean; reason: string }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "validateSeize"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [[boolean, string] & { ok: boolean; reason: string }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "validateTransfer"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [[boolean, string] & { ok: boolean; reason: string }],
    "nonpayable"
  >;

  getEvent(
    key: "ComplianceViolation"
  ): TypedContractEvent<
    ComplianceViolationEvent.InputTuple,
    ComplianceViolationEvent.OutputTuple,
    ComplianceViolationEvent.OutputObject
  >;
  getEvent(
    key: "PolicyChanged"
  ): TypedContractEvent<
    PolicyChangedEvent.InputTuple,
    PolicyChangedEvent.OutputTuple,
    PolicyChangedEvent.OutputObject
  >;

  filters: {
    "ComplianceViolation(string,address,address,uint256)": TypedContractEvent<
      ComplianceViolationEvent.InputTuple,
      ComplianceViolationEvent.OutputTuple,
      ComplianceViolationEvent.OutputObject
    >;
    ComplianceViolation: TypedContractEvent<
      ComplianceViolationEvent.InputTuple,
      ComplianceViolationEvent.OutputTuple,
      ComplianceViolationEvent.OutputObject
    >;

    "PolicyChanged(string,bytes)": TypedContractEvent<
      PolicyChangedEvent.InputTuple,
      PolicyChangedEvent.OutputTuple,
      PolicyChangedEvent.OutputObject
    >;
    PolicyChanged: TypedContractEvent<
      PolicyChangedEvent.InputTuple,
      PolicyChangedEvent.OutputTuple,
      PolicyChangedEvent.OutputObject
    >;
  };
}
