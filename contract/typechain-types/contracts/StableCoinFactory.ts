/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace StableCoinFactory {
  export type StableCoinInfoStruct = {
    tokenAddress: AddressLike;
    name: string;
    symbol: string;
    decimals: BigNumberish;
    maxSupply: BigNumberish;
    issuer: AddressLike;
    createdAt: BigNumberish;
    active: boolean;
  };

  export type StableCoinInfoStructOutput = [
    tokenAddress: string,
    name: string,
    symbol: string,
    decimals: bigint,
    maxSupply: bigint,
    issuer: string,
    createdAt: bigint,
    active: boolean
  ] & {
    tokenAddress: string;
    name: string;
    symbol: string;
    decimals: bigint;
    maxSupply: bigint;
    issuer: string;
    createdAt: bigint;
    active: boolean;
  };
}

export interface StableCoinFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "authorizedIssuers"
      | "createStableCoin"
      | "getStableCoinBySymbol"
      | "getStableCoinCount"
      | "getStableCoinInfo"
      | "getStableCoinsByIssuer"
      | "owner"
      | "renounceOwnership"
      | "setAuthorizedIssuer"
      | "stableCoins"
      | "symbolToAddress"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "IssuerAuthorized"
      | "OwnershipTransferred"
      | "StableCoinCreated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "authorizedIssuers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createStableCoin",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStableCoinBySymbol",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getStableCoinCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStableCoinInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStableCoinsByIssuer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthorizedIssuer",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "stableCoins",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "symbolToAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "authorizedIssuers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createStableCoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStableCoinBySymbol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStableCoinCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStableCoinInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStableCoinsByIssuer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuthorizedIssuer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableCoins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "symbolToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace IssuerAuthorizedEvent {
  export type InputTuple = [issuer: AddressLike, authorized: boolean];
  export type OutputTuple = [issuer: string, authorized: boolean];
  export interface OutputObject {
    issuer: string;
    authorized: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StableCoinCreatedEvent {
  export type InputTuple = [
    tokenAddress: AddressLike,
    name: string,
    symbol: string,
    issuer: AddressLike
  ];
  export type OutputTuple = [
    tokenAddress: string,
    name: string,
    symbol: string,
    issuer: string
  ];
  export interface OutputObject {
    tokenAddress: string;
    name: string;
    symbol: string;
    issuer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface StableCoinFactory extends BaseContract {
  connect(runner?: ContractRunner | null): StableCoinFactory;
  waitForDeployment(): Promise<this>;

  interface: StableCoinFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  authorizedIssuers: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  createStableCoin: TypedContractMethod<
    [
      name: string,
      symbol: string,
      decimals: BigNumberish,
      maxSupply: BigNumberish
    ],
    [string],
    "nonpayable"
  >;

  getStableCoinBySymbol: TypedContractMethod<
    [symbol: string],
    [string],
    "view"
  >;

  getStableCoinCount: TypedContractMethod<[], [bigint], "view">;

  getStableCoinInfo: TypedContractMethod<
    [index: BigNumberish],
    [StableCoinFactory.StableCoinInfoStructOutput],
    "view"
  >;

  getStableCoinsByIssuer: TypedContractMethod<
    [issuer: AddressLike],
    [string[]],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setAuthorizedIssuer: TypedContractMethod<
    [issuer: AddressLike, authorized: boolean],
    [void],
    "nonpayable"
  >;

  stableCoins: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, bigint, string, bigint, boolean] & {
        tokenAddress: string;
        name: string;
        symbol: string;
        decimals: bigint;
        maxSupply: bigint;
        issuer: string;
        createdAt: bigint;
        active: boolean;
      }
    ],
    "view"
  >;

  symbolToAddress: TypedContractMethod<[arg0: string], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "authorizedIssuers"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "createStableCoin"
  ): TypedContractMethod<
    [
      name: string,
      symbol: string,
      decimals: BigNumberish,
      maxSupply: BigNumberish
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getStableCoinBySymbol"
  ): TypedContractMethod<[symbol: string], [string], "view">;
  getFunction(
    nameOrSignature: "getStableCoinCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getStableCoinInfo"
  ): TypedContractMethod<
    [index: BigNumberish],
    [StableCoinFactory.StableCoinInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStableCoinsByIssuer"
  ): TypedContractMethod<[issuer: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAuthorizedIssuer"
  ): TypedContractMethod<
    [issuer: AddressLike, authorized: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stableCoins"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, bigint, string, bigint, boolean] & {
        tokenAddress: string;
        name: string;
        symbol: string;
        decimals: bigint;
        maxSupply: bigint;
        issuer: string;
        createdAt: bigint;
        active: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "symbolToAddress"
  ): TypedContractMethod<[arg0: string], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "IssuerAuthorized"
  ): TypedContractEvent<
    IssuerAuthorizedEvent.InputTuple,
    IssuerAuthorizedEvent.OutputTuple,
    IssuerAuthorizedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "StableCoinCreated"
  ): TypedContractEvent<
    StableCoinCreatedEvent.InputTuple,
    StableCoinCreatedEvent.OutputTuple,
    StableCoinCreatedEvent.OutputObject
  >;

  filters: {
    "IssuerAuthorized(address,bool)": TypedContractEvent<
      IssuerAuthorizedEvent.InputTuple,
      IssuerAuthorizedEvent.OutputTuple,
      IssuerAuthorizedEvent.OutputObject
    >;
    IssuerAuthorized: TypedContractEvent<
      IssuerAuthorizedEvent.InputTuple,
      IssuerAuthorizedEvent.OutputTuple,
      IssuerAuthorizedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "StableCoinCreated(address,string,string,address)": TypedContractEvent<
      StableCoinCreatedEvent.InputTuple,
      StableCoinCreatedEvent.OutputTuple,
      StableCoinCreatedEvent.OutputObject
    >;
    StableCoinCreated: TypedContractEvent<
      StableCoinCreatedEvent.InputTuple,
      StableCoinCreatedEvent.OutputTuple,
      StableCoinCreatedEvent.OutputObject
    >;
  };
}
