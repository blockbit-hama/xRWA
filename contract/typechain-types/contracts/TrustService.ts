/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface TrustServiceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "hasMinimumRole"
      | "hasRole"
      | "isRoleManager"
      | "owner"
      | "renounceOwnership"
      | "roleMemberAt"
      | "roleMemberCount"
      | "roleOf"
      | "setRole"
      | "setRoleManager"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "OwnershipTransferred" | "RoleChanged"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "hasMinimumRole",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isRoleManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "roleMemberAt",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "roleMemberCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "roleOf", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "setRole",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoleManager",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "hasMinimumRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isRoleManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "roleMemberAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "roleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roleOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRoleManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleChangedEvent {
  export type InputTuple = [
    addr: AddressLike,
    oldRole: BigNumberish,
    newRole: BigNumberish
  ];
  export type OutputTuple = [addr: string, oldRole: bigint, newRole: bigint];
  export interface OutputObject {
    addr: string;
    oldRole: bigint;
    newRole: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TrustService extends BaseContract {
  connect(runner?: ContractRunner | null): TrustService;
  waitForDeployment(): Promise<this>;

  interface: TrustServiceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  hasMinimumRole: TypedContractMethod<
    [addr: AddressLike, minRole: BigNumberish],
    [boolean],
    "view"
  >;

  hasRole: TypedContractMethod<
    [addr: AddressLike, role: BigNumberish],
    [boolean],
    "view"
  >;

  isRoleManager: TypedContractMethod<[addr: AddressLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  roleMemberAt: TypedContractMethod<
    [role: BigNumberish, index: BigNumberish],
    [string],
    "view"
  >;

  roleMemberCount: TypedContractMethod<[role: BigNumberish], [bigint], "view">;

  roleOf: TypedContractMethod<[addr: AddressLike], [bigint], "view">;

  setRole: TypedContractMethod<
    [addr: AddressLike, role: BigNumberish],
    [void],
    "nonpayable"
  >;

  setRoleManager: TypedContractMethod<
    [manager: AddressLike, enabled: boolean],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "hasMinimumRole"
  ): TypedContractMethod<
    [addr: AddressLike, minRole: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [addr: AddressLike, role: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isRoleManager"
  ): TypedContractMethod<[addr: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "roleMemberAt"
  ): TypedContractMethod<
    [role: BigNumberish, index: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "roleMemberCount"
  ): TypedContractMethod<[role: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "roleOf"
  ): TypedContractMethod<[addr: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "setRole"
  ): TypedContractMethod<
    [addr: AddressLike, role: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRoleManager"
  ): TypedContractMethod<
    [manager: AddressLike, enabled: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RoleChanged"
  ): TypedContractEvent<
    RoleChangedEvent.InputTuple,
    RoleChangedEvent.OutputTuple,
    RoleChangedEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RoleChanged(address,uint256,uint256)": TypedContractEvent<
      RoleChangedEvent.InputTuple,
      RoleChangedEvent.OutputTuple,
      RoleChangedEvent.OutputObject
    >;
    RoleChanged: TypedContractEvent<
      RoleChangedEvent.InputTuple,
      RoleChangedEvent.OutputTuple,
      RoleChangedEvent.OutputObject
    >;
  };
}
