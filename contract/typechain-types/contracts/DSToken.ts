/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface DSTokenInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allowance"
      | "approve"
      | "balanceOf"
      | "balanceOfInvestor"
      | "burn"
      | "compliance"
      | "decimals"
      | "getLockInfo"
      | "getWalletAt"
      | "issueTokenWithLocking"
      | "issueTokens"
      | "name"
      | "pause"
      | "paused"
      | "preTransferCheck"
      | "registry"
      | "releaseLock"
      | "seize"
      | "setLock"
      | "spendableBalance"
      | "symbol"
      | "totalIssued"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "trust"
      | "unpause"
      | "updateServices"
      | "walletCount"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "Burned"
      | "Issued"
      | "IssuedWithLock"
      | "LockReleased"
      | "LockSet"
      | "Paused"
      | "Seized"
      | "Transfer"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfInvestor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [AddressLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "compliance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getLockInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getWalletAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "issueTokenWithLocking",
    values: [AddressLike, BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "issueTokens",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "preTransferCheck",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "releaseLock",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "seize",
    values: [AddressLike, AddressLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLock",
    values: [AddressLike, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "spendableBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalIssued",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "trust", values?: undefined): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateServices",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "walletCount",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfInvestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "compliance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLockInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWalletAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "issueTokenWithLocking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "issueTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "preTransferCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "releaseLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "seize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setLock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "spendableBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalIssued",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "trust", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateServices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "walletCount",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BurnedEvent {
  export type InputTuple = [
    who: AddressLike,
    value: BigNumberish,
    reason: string
  ];
  export type OutputTuple = [who: string, value: bigint, reason: string];
  export interface OutputObject {
    who: string;
    value: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IssuedEvent {
  export type InputTuple = [to: AddressLike, value: BigNumberish];
  export type OutputTuple = [to: string, value: bigint];
  export interface OutputObject {
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IssuedWithLockEvent {
  export type InputTuple = [
    to: AddressLike,
    minted: BigNumberish,
    locked: BigNumberish,
    releaseTime: BigNumberish,
    reason: string
  ];
  export type OutputTuple = [
    to: string,
    minted: bigint,
    locked: bigint,
    releaseTime: bigint,
    reason: string
  ];
  export interface OutputObject {
    to: string;
    minted: bigint;
    locked: bigint;
    releaseTime: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LockReleasedEvent {
  export type InputTuple = [to: AddressLike, amount: BigNumberish];
  export type OutputTuple = [to: string, amount: bigint];
  export interface OutputObject {
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LockSetEvent {
  export type InputTuple = [
    to: AddressLike,
    amount: BigNumberish,
    releaseTime: BigNumberish,
    reason: string
  ];
  export type OutputTuple = [
    to: string,
    amount: bigint,
    releaseTime: bigint,
    reason: string
  ];
  export interface OutputObject {
    to: string;
    amount: bigint;
    releaseTime: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SeizedEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish,
    reason: string
  ];
  export type OutputTuple = [
    from: string,
    to: string,
    value: bigint,
    reason: string
  ];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DSToken extends BaseContract {
  connect(runner?: ContractRunner | null): DSToken;
  waitForDeployment(): Promise<this>;

  interface: DSTokenInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  balanceOfInvestor: TypedContractMethod<
    [investorId: string],
    [bigint],
    "view"
  >;

  burn: TypedContractMethod<
    [who: AddressLike, value: BigNumberish, reason: string],
    [boolean],
    "nonpayable"
  >;

  compliance: TypedContractMethod<[], [string], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  getLockInfo: TypedContractMethod<
    [addr: AddressLike],
    [
      [bigint, bigint, string] & {
        amountLocked: bigint;
        releaseTime: bigint;
        reason: string;
      }
    ],
    "view"
  >;

  getWalletAt: TypedContractMethod<[index: BigNumberish], [string], "view">;

  issueTokenWithLocking: TypedContractMethod<
    [
      to: AddressLike,
      value: BigNumberish,
      valueLocked: BigNumberish,
      reason: string,
      releaseTime: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;

  issueTokens: TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  preTransferCheck: TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [[boolean, string] & { ok: boolean; reason: string }],
    "view"
  >;

  registry: TypedContractMethod<[], [string], "view">;

  releaseLock: TypedContractMethod<[to: AddressLike], [void], "nonpayable">;

  seize: TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish, reason: string],
    [boolean],
    "nonpayable"
  >;

  setLock: TypedContractMethod<
    [
      to: AddressLike,
      amount: BigNumberish,
      releaseTime: BigNumberish,
      reason: string
    ],
    [void],
    "nonpayable"
  >;

  spendableBalance: TypedContractMethod<[addr: AddressLike], [bigint], "view">;

  symbol: TypedContractMethod<[], [string], "view">;

  totalIssued: TypedContractMethod<[], [bigint], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  trust: TypedContractMethod<[], [string], "view">;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateServices: TypedContractMethod<
    [_trust: AddressLike, _registry: AddressLike, _compliance: AddressLike],
    [void],
    "nonpayable"
  >;

  walletCount: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "balanceOfInvestor"
  ): TypedContractMethod<[investorId: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<
    [who: AddressLike, value: BigNumberish, reason: string],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "compliance"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLockInfo"
  ): TypedContractMethod<
    [addr: AddressLike],
    [
      [bigint, bigint, string] & {
        amountLocked: bigint;
        releaseTime: bigint;
        reason: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getWalletAt"
  ): TypedContractMethod<[index: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "issueTokenWithLocking"
  ): TypedContractMethod<
    [
      to: AddressLike,
      value: BigNumberish,
      valueLocked: BigNumberish,
      reason: string,
      releaseTime: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "issueTokens"
  ): TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "preTransferCheck"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [[boolean, string] & { ok: boolean; reason: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "registry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "releaseLock"
  ): TypedContractMethod<[to: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "seize"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish, reason: string],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setLock"
  ): TypedContractMethod<
    [
      to: AddressLike,
      amount: BigNumberish,
      releaseTime: BigNumberish,
      reason: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "spendableBalance"
  ): TypedContractMethod<[addr: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalIssued"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "trust"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateServices"
  ): TypedContractMethod<
    [_trust: AddressLike, _registry: AddressLike, _compliance: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "walletCount"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "Burned"
  ): TypedContractEvent<
    BurnedEvent.InputTuple,
    BurnedEvent.OutputTuple,
    BurnedEvent.OutputObject
  >;
  getEvent(
    key: "Issued"
  ): TypedContractEvent<
    IssuedEvent.InputTuple,
    IssuedEvent.OutputTuple,
    IssuedEvent.OutputObject
  >;
  getEvent(
    key: "IssuedWithLock"
  ): TypedContractEvent<
    IssuedWithLockEvent.InputTuple,
    IssuedWithLockEvent.OutputTuple,
    IssuedWithLockEvent.OutputObject
  >;
  getEvent(
    key: "LockReleased"
  ): TypedContractEvent<
    LockReleasedEvent.InputTuple,
    LockReleasedEvent.OutputTuple,
    LockReleasedEvent.OutputObject
  >;
  getEvent(
    key: "LockSet"
  ): TypedContractEvent<
    LockSetEvent.InputTuple,
    LockSetEvent.OutputTuple,
    LockSetEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "Seized"
  ): TypedContractEvent<
    SeizedEvent.InputTuple,
    SeizedEvent.OutputTuple,
    SeizedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "Burned(address,uint256,string)": TypedContractEvent<
      BurnedEvent.InputTuple,
      BurnedEvent.OutputTuple,
      BurnedEvent.OutputObject
    >;
    Burned: TypedContractEvent<
      BurnedEvent.InputTuple,
      BurnedEvent.OutputTuple,
      BurnedEvent.OutputObject
    >;

    "Issued(address,uint256)": TypedContractEvent<
      IssuedEvent.InputTuple,
      IssuedEvent.OutputTuple,
      IssuedEvent.OutputObject
    >;
    Issued: TypedContractEvent<
      IssuedEvent.InputTuple,
      IssuedEvent.OutputTuple,
      IssuedEvent.OutputObject
    >;

    "IssuedWithLock(address,uint256,uint256,uint64,string)": TypedContractEvent<
      IssuedWithLockEvent.InputTuple,
      IssuedWithLockEvent.OutputTuple,
      IssuedWithLockEvent.OutputObject
    >;
    IssuedWithLock: TypedContractEvent<
      IssuedWithLockEvent.InputTuple,
      IssuedWithLockEvent.OutputTuple,
      IssuedWithLockEvent.OutputObject
    >;

    "LockReleased(address,uint256)": TypedContractEvent<
      LockReleasedEvent.InputTuple,
      LockReleasedEvent.OutputTuple,
      LockReleasedEvent.OutputObject
    >;
    LockReleased: TypedContractEvent<
      LockReleasedEvent.InputTuple,
      LockReleasedEvent.OutputTuple,
      LockReleasedEvent.OutputObject
    >;

    "LockSet(address,uint256,uint64,string)": TypedContractEvent<
      LockSetEvent.InputTuple,
      LockSetEvent.OutputTuple,
      LockSetEvent.OutputObject
    >;
    LockSet: TypedContractEvent<
      LockSetEvent.InputTuple,
      LockSetEvent.OutputTuple,
      LockSetEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "Seized(address,address,uint256,string)": TypedContractEvent<
      SeizedEvent.InputTuple,
      SeizedEvent.OutputTuple,
      SeizedEvent.OutputObject
    >;
    Seized: TypedContractEvent<
      SeizedEvent.InputTuple,
      SeizedEvent.OutputTuple,
      SeizedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
