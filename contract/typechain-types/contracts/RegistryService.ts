/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface RegistryServiceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addWallet"
      | "getAttribute"
      | "getCountry"
      | "investorCount"
      | "investorExists"
      | "investorOf"
      | "isAttributeValid"
      | "isWalletRegistered"
      | "owner"
      | "registerInvestor"
      | "renounceOwnership"
      | "setAttribute"
      | "setCountry"
      | "transferOwnership"
      | "walletsOf"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AttributeSet"
      | "CountrySet"
      | "InvestorRegistered"
      | "OwnershipTransferred"
      | "WalletAdded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addWallet",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAttribute",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getCountry", values: [string]): string;
  encodeFunctionData(
    functionFragment: "investorCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "investorExists",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "investorOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAttributeValid",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isWalletRegistered",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerInvestor",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAttribute",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setCountry",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "walletsOf", values: [string]): string;

  decodeFunctionResult(functionFragment: "addWallet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAttribute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getCountry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "investorCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "investorExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "investorOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAttributeValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWalletRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerInvestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAttribute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setCountry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "walletsOf", data: BytesLike): Result;
}

export namespace AttributeSetEvent {
  export type InputTuple = [
    investorId: string,
    attrId: BigNumberish,
    value: BigNumberish,
    expiry: BigNumberish,
    proofHash: BytesLike
  ];
  export type OutputTuple = [
    investorId: string,
    attrId: bigint,
    value: bigint,
    expiry: bigint,
    proofHash: string
  ];
  export interface OutputObject {
    investorId: string;
    attrId: bigint;
    value: bigint;
    expiry: bigint;
    proofHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CountrySetEvent {
  export type InputTuple = [investorId: string, country: string];
  export type OutputTuple = [investorId: string, country: string];
  export interface OutputObject {
    investorId: string;
    country: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InvestorRegisteredEvent {
  export type InputTuple = [investorId: string, collisionHash: BytesLike];
  export type OutputTuple = [investorId: string, collisionHash: string];
  export interface OutputObject {
    investorId: string;
    collisionHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WalletAddedEvent {
  export type InputTuple = [wallet: AddressLike, investorId: string];
  export type OutputTuple = [wallet: string, investorId: string];
  export interface OutputObject {
    wallet: string;
    investorId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RegistryService extends BaseContract {
  connect(runner?: ContractRunner | null): RegistryService;
  waitForDeployment(): Promise<this>;

  interface: RegistryServiceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addWallet: TypedContractMethod<
    [wallet: AddressLike, investorId: string],
    [void],
    "nonpayable"
  >;

  getAttribute: TypedContractMethod<
    [investorId: string, attrId: BigNumberish],
    [
      [bigint, bigint, string] & {
        value: bigint;
        expiry: bigint;
        proofHash: string;
      }
    ],
    "view"
  >;

  getCountry: TypedContractMethod<[investorId: string], [string], "view">;

  investorCount: TypedContractMethod<[], [bigint], "view">;

  investorExists: TypedContractMethod<[investorId: string], [boolean], "view">;

  investorOf: TypedContractMethod<[wallet: AddressLike], [string], "view">;

  isAttributeValid: TypedContractMethod<
    [investorId: string, attrId: BigNumberish],
    [boolean],
    "view"
  >;

  isWalletRegistered: TypedContractMethod<
    [wallet: AddressLike],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  registerInvestor: TypedContractMethod<
    [investorId: string, collisionHash: BytesLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setAttribute: TypedContractMethod<
    [
      investorId: string,
      attrId: BigNumberish,
      value: BigNumberish,
      expiry: BigNumberish,
      proofHash: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setCountry: TypedContractMethod<
    [investorId: string, country: string],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  walletsOf: TypedContractMethod<[investorId: string], [string[]], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addWallet"
  ): TypedContractMethod<
    [wallet: AddressLike, investorId: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAttribute"
  ): TypedContractMethod<
    [investorId: string, attrId: BigNumberish],
    [
      [bigint, bigint, string] & {
        value: bigint;
        expiry: bigint;
        proofHash: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCountry"
  ): TypedContractMethod<[investorId: string], [string], "view">;
  getFunction(
    nameOrSignature: "investorCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "investorExists"
  ): TypedContractMethod<[investorId: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "investorOf"
  ): TypedContractMethod<[wallet: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "isAttributeValid"
  ): TypedContractMethod<
    [investorId: string, attrId: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isWalletRegistered"
  ): TypedContractMethod<[wallet: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registerInvestor"
  ): TypedContractMethod<
    [investorId: string, collisionHash: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAttribute"
  ): TypedContractMethod<
    [
      investorId: string,
      attrId: BigNumberish,
      value: BigNumberish,
      expiry: BigNumberish,
      proofHash: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCountry"
  ): TypedContractMethod<
    [investorId: string, country: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "walletsOf"
  ): TypedContractMethod<[investorId: string], [string[]], "view">;

  getEvent(
    key: "AttributeSet"
  ): TypedContractEvent<
    AttributeSetEvent.InputTuple,
    AttributeSetEvent.OutputTuple,
    AttributeSetEvent.OutputObject
  >;
  getEvent(
    key: "CountrySet"
  ): TypedContractEvent<
    CountrySetEvent.InputTuple,
    CountrySetEvent.OutputTuple,
    CountrySetEvent.OutputObject
  >;
  getEvent(
    key: "InvestorRegistered"
  ): TypedContractEvent<
    InvestorRegisteredEvent.InputTuple,
    InvestorRegisteredEvent.OutputTuple,
    InvestorRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "WalletAdded"
  ): TypedContractEvent<
    WalletAddedEvent.InputTuple,
    WalletAddedEvent.OutputTuple,
    WalletAddedEvent.OutputObject
  >;

  filters: {
    "AttributeSet(string,uint256,uint256,uint256,bytes32)": TypedContractEvent<
      AttributeSetEvent.InputTuple,
      AttributeSetEvent.OutputTuple,
      AttributeSetEvent.OutputObject
    >;
    AttributeSet: TypedContractEvent<
      AttributeSetEvent.InputTuple,
      AttributeSetEvent.OutputTuple,
      AttributeSetEvent.OutputObject
    >;

    "CountrySet(string,string)": TypedContractEvent<
      CountrySetEvent.InputTuple,
      CountrySetEvent.OutputTuple,
      CountrySetEvent.OutputObject
    >;
    CountrySet: TypedContractEvent<
      CountrySetEvent.InputTuple,
      CountrySetEvent.OutputTuple,
      CountrySetEvent.OutputObject
    >;

    "InvestorRegistered(string,bytes32)": TypedContractEvent<
      InvestorRegisteredEvent.InputTuple,
      InvestorRegisteredEvent.OutputTuple,
      InvestorRegisteredEvent.OutputObject
    >;
    InvestorRegistered: TypedContractEvent<
      InvestorRegisteredEvent.InputTuple,
      InvestorRegisteredEvent.OutputTuple,
      InvestorRegisteredEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "WalletAdded(address,string)": TypedContractEvent<
      WalletAddedEvent.InputTuple,
      WalletAddedEvent.OutputTuple,
      WalletAddedEvent.OutputObject
    >;
    WalletAdded: TypedContractEvent<
      WalletAddedEvent.InputTuple,
      WalletAddedEvent.OutputTuple,
      WalletAddedEvent.OutputObject
    >;
  };
}
